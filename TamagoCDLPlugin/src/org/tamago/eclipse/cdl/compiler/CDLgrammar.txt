// commentaire
@meta(grammar, "Testgrammar");
@meta(start, "tamago");

@keywords(true, false, readwrite,read, write,module,service, component,composite,assembly,allow,behavior,state,implements,include,invariant,fail,or,xor,not,method,id,null,nil,percolator,@pre,pre,post,and,forall,exists,in,property,provide,refine,behavior,default,state,states,transitions,transition,from,to,with,when);


<ident:java.lang.String> := @regexp("[a-zA-Z_]\w*");
<qualifident:java.lang.String> := @regexp("[a-zA-Z_]\w*([.][a-zA-Z_]\w*)*(\[\])?");

<int:org.tamago.eclipse.cdl.compiler.cdlast.CDLInteger> := @transform(convInteger,@regexp("(-)?([0-9]+)"));
<real:org.tamago.eclipse.cdl.compiler.cdlast.CDLReal> := @transform(convReal,@regexp("[0-9]+([.][0-9]+((e|E)([+]|[-])?[0-9]+)?)?")); 
<string:org.tamago.eclipse.cdl.compiler.cdlast.CDL> := @transform(convString,@regexp("\"[^\"]*\""));

<allow:tamagocc.api.TAllow> := @transform(convAllow, @seq(@ignore(@literal("allow")),<ident>, @ignore(@literal(";"))));

<cast1:org.CDLCast> := @transform(convCast,@seq(@ignore(@literal("|")),<qualifident>,@ignore(@literal("|")),<arith>));
<cast2:org.CDLCast> := @transform(convCast,@seq(@ignore(@literal("(")),<qualifident>,@ignore(@literal(")")),<arith>));
<cast:org.CDLCast> := @choice(<cast1>,<cast2>);

@def_expr_parser(arith);
@expr_bracket(arith,"(",")");

@expr_operand(arith,<int>);
@expr_operand(arith,<real>);
@expr_operand(arith,<cast>);
@expr_operand(arith,<string>);

@expr_operator(arith,infix,left,30, @transform(convOperatorInfix,@literal("+")));
@expr_operator(arith,infix,left,60, @transform(convOperatorInfix,@literal("*")));
@expr_operator(arith,infix,left,60, @transform(convOperatorInfix,@literal("/")));
@expr_operator(arith,infix,left,30, @transform(convOperatorInfix,@literal("-")));
@expr_operator(arith,infix,left,50, @transform(convOperatorInfix,@literal("%")));