package tamago.aca.bank;
import tamago.ext.tamagocc.*;
import tamago.*;
import java.util.Hashtable;
import java.util.ArrayList;
/*
    
 ******************************************
 *                CDeposit                *
 ******************************************
 *
 * DO NOT EDIT THIS FILE.
 * THIS FILE IS GENERATED AUTOMATICALLY BY TAMAGOCC
 * Created date : Thu Feb 23 23:47:02 CET 2012
 * authors : Hakim Belhaouari and Frederic Peschanski
 * site : http://code.google.com/p/tamago/

*/
public class CDepositContainerImpl_plugin
     extends tamago.ext.tamagocc.TamagoCCContainerImpl
    implements tamago.aca.bank.CDepositContainer
{
    // Members Variables
    private tamago.aca.bank.CDeposit tamago_decorated_component;

    // Properties
    /**
        Getter of the property opNumber
    */
    public int getOpNumber(){
        return tamago_decorated_component.getOpNumber();
    }
    /**
        Getter of the property acaInitialised
    */
    public boolean getAcaInitialised(){
        return tamago_decorated_component.getAcaInitialised();
    }
    /**
        Setter of the property acaInitialised
    */
    public void setAcaInitialised(boolean acaInitialised){
        tamago_decorated_component.setAcaInitialised(acaInitialised);
    }

    // Methods
    protected void fetchServiceBehavior(TamagoCCMethodID mid) throws TamagoCCServiceBehaviorException{
        if((current.id() == 9)) {
            if(methodID("check").equals(mid)) {
                current = states.get(8);
                return ;
            }
            if(methodID("register").equals(mid)) {
                current = states.get(1);
                return ;
            }
        }
        if((current.id() == 8)) {
            if(methodID("register").equals(mid)) {
                current = states.get(4);
                return ;
            }
        }
        if((current.id() == 7)) {
            if(methodID("validate").equals(mid)) {
                current = states.get(5);
                return ;
            }
        }
        if((current.id() == 6)) {
            if(methodID("init").equals(mid)) {
                current = states.get(2);
                return ;
            }
        }
        if((current.id() == 5)) {
            if(methodID("init").equals(mid)) {
                current = states.get(2);
                return ;
            }
        }
        if((current.id() == 4)) {
            if(methodID("validate").equals(mid)) {
                current = states.get(0);
                return ;
            }
            if(methodID("validate_dir").equals(mid)) {
                current = states.get(7);
                return ;
            }
            if(methodID("cancel").equals(mid)) {
                current = states.get(6);
                return ;
            }
        }
        if((current.id() == 3)) {
            if(methodID("init").equals(mid)) {
                current = states.get(2);
                return ;
            }
        }
        if((current.id() == 2)) {
            if(methodID("deposit").equals(mid)) {
                current = states.get(9);
                return ;
            }
        }
        if((current.id() == 1)) {
            if(methodID("check").equals(mid)) {
                current = states.get(4);
                return ;
            }
        }
        if((current.id() == 0)) {
            if(methodID("validate_dir").equals(mid)) {
                current = states.get(5);
                return ;
            }
        }
    }


    /*
        Don't modify this constructor !

    */
    public CDepositContainerImpl_plugin (tamago.aca.bank.CDeposit component)
    {
        tamago_decorated_component = ((tamago.aca.bank.CDeposit) component);
        //  main IDs
        registerID("check", "check");
        registerID("validate_dir", "validate_dir");
        registerID("validate", "validate");
        registerID("init", "init");
        registerID("deposit", "deposit");
        registerID("register", "register");
        registerID("cancel", "cancel");
        //  secondary IDs
        registerID("check", "check");
        registerID("validate_dir", "validate_dir");
        registerID("validate", "validate");
        registerID("init", "init");
        registerID("deposit", "deposit");
        registerID("register", "register");
        registerID("cancel", "cancel");
        //  states generations
        TamagoCCState state = null;
        state = newstate();
        include(state, "validated");
        allow(state, methodID("validate_dir"));
        state = newstate();
        include(state, "registered");
        allow(state, methodID("check"));
        state = newstate();
        include(state, "initialized");
        allow(state, methodID("deposit"));
        state = newstate();
        include(state, "ninit");
        allow(state, methodID("init"));
        state = newstate();
        include(state, "waited");
        allow(state, methodID("validate"));
        allow(state, methodID("validate_dir"));
        allow(state, methodID("cancel"));
        state = newstate();
        include(state, "completed");
        allow(state, methodID("init"));
        state = newstate();
        include(state, "cancelled");
        allow(state, methodID("init"));
        state = newstate();
        include(state, "validateDir");
        allow(state, methodID("validate"));
        state = newstate();
        include(state, "checked");
        allow(state, methodID("register"));
        state = newstate();
        include(state, "deposed");
        allow(state, methodID("check"));
        allow(state, methodID("register"));
        //  Initialize the current default state
        current = states.get(3);
        // ----- if necessary you can add some code under this ligne ----
    }


    public RequiredService[] getRequiredServices(){
        RequiredService[] rs = new RequiredService[3];
        rs[0] = new RequiredService("Client", "tamago.aca.bank", "user");
        rs[1] = new RequiredService("Cheque", "tamago.aca.bank", "cheq");
        rs[2] = new RequiredService("Bank", "tamago.aca.bank", "bank");
        return rs;
    }


    public void bind(String label, TamagoCCService service) throws ServiceBindException{
        tamago_decorated_component.bind(label, service);
    }


    public boolean isBound(){
        return (tamago_decorated_component == null);
    }


    public boolean isBound(String label){
        if(label.equals("user")) {
            return (user() != null);
        }
        if(label.equals("cheq")) {
            return (cheq() != null);
        }
        if(label.equals("bank")) {
            return (bank() != null);
        }
        return false;
    }


    public void core_set_properties(String property, Object value){
        throw new TamagoCCHotSwappingException();
    }


    public void tamago_hotswapping(TamagoCCComponent component){
        int sav_opNumber = getOpNumber();
        boolean sav_acaInitialised = getAcaInitialised();
        tamago_decorated_component = ((tamago.aca.bank.CDeposit) component);
        tamago_decorated_component.core_set_properties("opNumber", sav_opNumber);
        tamago_decorated_component.core_set_properties("acaInitialised", sav_acaInitialised);
    }


    public void check(tamago.ext.aca2.ACA aca) throws tamago.TamagoException{
        // Initialisation of variables
        // Invariant test before precondition
        // Environment of Precondition
        if(!canCallMethod(methodID("check"))) {
            throw new TamagoCCBehaviorException(methodID("check"));
        }
        // Precondition test
        // No precondition detected
        // Initialisation of at pre expression
        // redirect call
        tamago_decorated_component.check(aca);
        // Environment of Postcondition
        // Postcondition test
        boolean __tamago_var_perco_31 = (tamago_decorated_component.getOpNumber() > 0);
        if(!__tamago_var_perco_31) {
            java.util.ArrayList __tamago_var_perco_30 = new java.util.ArrayList();
            if(!__tamago_var_perco_31) {
                __tamago_var_perco_30.add(new tamago.ext.tamagocc.TamagoCCFailItem("(#opNumber > 0)"));
            }
            throw new tamago.ext.tamagocc.TamagoCCFailPostcondition(__tamago_var_perco_30);
        }
        // Invariant test after postcondition
        // Update behavioral's state
        fetchServiceBehavior(methodID("check"));
        // Return of the redirect method if needed
    }


    public void validate_director(tamago.ext.aca2.ACA aca) throws tamago.TamagoException{
        // Initialisation of variables
        // Invariant test before precondition
        // Environment of Precondition
        if(!canCallMethod(methodID("validate_dir"))) {
            throw new TamagoCCBehaviorException(methodID("validate_dir"));
        }
        // Precondition test
        // No precondition detected
        // Initialisation of at pre expression
        // redirect call
        tamago_decorated_component.validate_director(aca);
        // Environment of Postcondition
        // Postcondition test
        // No postcondition detected
        // Invariant test after postcondition
        // Update behavioral's state
        fetchServiceBehavior(methodID("validate_dir"));
        // Return of the redirect method if needed
    }


    public void validate(tamago.ext.aca2.ACA aca) throws tamago.TamagoException{
        // Initialisation of variables
        // Invariant test before precondition
        // Environment of Precondition
        if(!canCallMethod(methodID("validate"))) {
            throw new TamagoCCBehaviorException(methodID("validate"));
        }
        // Precondition test
        // No precondition detected
        // Initialisation of at pre expression
        // redirect call
        tamago_decorated_component.validate(aca);
        // Environment of Postcondition
        // Postcondition test
        // No postcondition detected
        // Invariant test after postcondition
        // Update behavioral's state
        fetchServiceBehavior(methodID("validate"));
        // Return of the redirect method if needed
    }


    public void init() throws tamago.TamagoException{
        // Initialisation of variables
        // Invariant test before precondition
        // Environment of Precondition
        if(!canCallMethod(methodID("init"))) {
            throw new TamagoCCBehaviorException(methodID("init"));
        }
        // Precondition test
        // No precondition detected
        // Initialisation of at pre expression
        // redirect call
        tamago_decorated_component.init();
        // Environment of Postcondition
        // Postcondition test
        boolean __tamago_var_perco_43 = (tamago_decorated_component.getOpNumber() < 0);
        if(!__tamago_var_perco_43) {
            java.util.ArrayList __tamago_var_perco_42 = new java.util.ArrayList();
            if(!__tamago_var_perco_43) {
                __tamago_var_perco_42.add(new tamago.ext.tamagocc.TamagoCCFailItem("(#opNumber < 0)"));
            }
            throw new tamago.ext.tamagocc.TamagoCCFailPostcondition(__tamago_var_perco_42);
        }
        // Invariant test after postcondition
        // Update behavioral's state
        fetchServiceBehavior(methodID("init"));
        // Return of the redirect method if needed
    }


    public void deposit(tamago.ext.aca2.ACA aca) throws tamago.TamagoException{
        // Initialisation of variables
        // Invariant test before precondition
        // Environment of Precondition
        if(!canCallMethod(methodID("deposit"))) {
            throw new TamagoCCBehaviorException(methodID("deposit"));
        }
        // Precondition test
        // No precondition detected
        // Initialisation of at pre expression
        // redirect call
        tamago_decorated_component.deposit(aca);
        // Environment of Postcondition
        // Postcondition test
        // No postcondition detected
        // Invariant test after postcondition
        // Update behavioral's state
        fetchServiceBehavior(methodID("deposit"));
        // Return of the redirect method if needed
    }


    public void register(tamago.ext.aca2.ACA aca) throws tamago.TamagoException{
        // Initialisation of variables
        // Invariant test before precondition
        // Environment of Precondition
        if(!canCallMethod(methodID("register"))) {
            throw new TamagoCCBehaviorException(methodID("register"));
        }
        // Precondition test
        // No precondition detected
        // Initialisation of at pre expression
        // redirect call
        tamago_decorated_component.register(aca);
        // Environment of Postcondition
        // Postcondition test
        boolean __tamago_var_perco_51 = (tamago_decorated_component.getOpNumber() > 0);
        if(!__tamago_var_perco_51) {
            java.util.ArrayList __tamago_var_perco_50 = new java.util.ArrayList();
            if(!__tamago_var_perco_51) {
                __tamago_var_perco_50.add(new tamago.ext.tamagocc.TamagoCCFailItem("(#opNumber > 0)"));
            }
            throw new tamago.ext.tamagocc.TamagoCCFailPostcondition(__tamago_var_perco_50);
        }
        // Invariant test after postcondition
        // Update behavioral's state
        fetchServiceBehavior(methodID("register"));
        // Return of the redirect method if needed
    }


    public void cancel(tamago.ext.aca2.ACA aca) throws tamago.TamagoException{
        // Initialisation of variables
        // Invariant test before precondition
        // Environment of Precondition
        if(!canCallMethod(methodID("cancel"))) {
            throw new TamagoCCBehaviorException(methodID("cancel"));
        }
        // Precondition test
        // No precondition detected
        // Initialisation of at pre expression
        // redirect call
        tamago_decorated_component.cancel(aca);
        // Environment of Postcondition
        // Postcondition test
        // No postcondition detected
        // Invariant test after postcondition
        // Update behavioral's state
        fetchServiceBehavior(methodID("cancel"));
        // Return of the redirect method if needed
    }


    /**
        This method allow user to access to the required service.(You do not need to implement this method, TamagoCC generates it in the skeleton)
    */
    public tamago.aca.bank.Client user(){
        return tamago_decorated_component.user();
    }


    /**
        This method allow user to access to the required service.(You do not need to implement this method, TamagoCC generates it in the skeleton)
    */
    public tamago.aca.bank.Cheque cheq(){
        return tamago_decorated_component.cheq();
    }


    /**
        This method allow user to access to the required service.(You do not need to implement this method, TamagoCC generates it in the skeleton)
    */
    public tamago.aca.bank.Bank bank(){
        return tamago_decorated_component.bank();
    }
}